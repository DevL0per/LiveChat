//
//  ListOfUsersViewController.swift
//  LiveChat
//
//  Created by Роман Важник on 19/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListOfUsersDisplayLogic: class {
    func displayUsers(viewModel: ListOfUsers.FetchUsers.ViewModel)
}

class ListOfUsersViewController: UIViewController, ListOfUsersDisplayLogic {
    
    var interactor: ListOfUsersBusinessLogic?
    var router: (NSObjectProtocol & ListOfUsersRoutingLogic & ListOfUsersDataPassing)?
    var usersViewModel: [ListOfUsers.FetchUsers.ViewModel.UserViewModel]?
    
    var usersTableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        return tableView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupTableView()
        getUsers()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    func getUsers() {
        let request = ListOfUsers.FetchUsers.Request()
        interactor?.fetchUsers(request: request)
    }
    
    func displayUsers(viewModel: ListOfUsers.FetchUsers.ViewModel) {
        usersViewModel = viewModel.users
        usersTableView.reloadData()
    }
    
    private func setupTableView() {
        view.addSubview(usersTableView)
        usersTableView.dataSource = self
        usersTableView.delegate = self
        usersTableView.register(ListOfUsersTableViewCell.self, forCellReuseIdentifier: "usersCell")
        
        usersTableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        usersTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        usersTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        usersTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
    }
    
    private func setup() {
        let viewController = self
        let interactor = ListOfUsersInteractor()
        let presenter = ListOfUsersPresenter()
        let router = ListOfUsersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func dismiss(animated flag: Bool, completion: (() -> Void)? = nil) {
        super.dismiss(animated: flag, completion: nil)
    }
}


extension ListOfUsersViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return usersViewModel?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "usersCell", for: indexPath) as! ListOfUsersTableViewCell
        guard let userViewModel = usersViewModel?[indexPath.row] else { return UITableViewCell() }
        cell.setupUserElements(with: userViewModel)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let user = usersViewModel?[indexPath.row] else { return }
        let vc = ChatScreenViewController()
        vc.user = user
        navigationController?.pushViewController(vc, animated: true)
    }
}
