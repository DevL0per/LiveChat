//
//  ChatScreenPresenter.swift
//  LiveChat
//
//  Created by Роман Важник on 18/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol ChatsScreenPresentationLogic {
    func userHasLogouted(response: ChatsScreen.Logout.Response)
    func presentUserName(response: ChatsScreen.FetchUserName.Response)
    func presentMessages(response: ChatsScreen.FetchMessages.Response)
}

class ChatsScreenPresenter: ChatsScreenPresentationLogic {
    
    weak var viewController: ChatsScreenDisplayLogic?
    var dateFormatter = MyDateFormatter()
    
    func userHasLogouted(response: ChatsScreen.Logout.Response) {
        let viewModel = ChatsScreen.Logout.ViewModel()
        viewController?.displayLoginScreen(viewModel: viewModel)
    }
    
    func presentUserName(response: ChatsScreen.FetchUserName.Response) {
        let name = response.user.name
        let viewModel = ChatsScreen.FetchUserName.ViewModel(userName: name)
        viewController?.displayUserName(viewModel: viewModel)
    }
    
    func presentMessages(response: ChatsScreen.FetchMessages.Response) {
        fetchUserName(from: response.fromUserId) { [weak self] fromUserName in
            let date = self?.dateFormatter.formatToString(from: response.message.date)
            let messageViewModel = ChatsScreen.FetchMessages.ViewModel.MessagesViewModel(text: response.message.text ?? "image",
                                                                                         fromUserName: fromUserName,
                                                                                         date: date ?? "")
            var messageDictionary = response.messagesDictionary
            messageDictionary[response.message.toId] = messageViewModel
            let viewModel = ChatsScreen.FetchMessages.ViewModel(messagesDictionary: messageDictionary)
            self?.viewController?.displayMessages(viewModel: viewModel)
        }
    }
    
    private func fetchUserName(from userId: String, completion: @escaping (String) -> ()) {
        let ref = Database.database().reference(withPath: "users").child(userId)
        ref.observeSingleEvent(of: .value) { (snapshot) in
            let user = User(snapshot: snapshot)
            completion(user.name)
        }
    }
}
