//
//  AuthorizationScreenViewController.swift
//  LiveChat
//
//  Created by Роман Важник on 18/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthorizationScreenDisplayLogic: class {
    func displayUser()
    func displayNameTextFieldNewsHeight(viewModel: AuthorizationScreen.ChangeTextFieldHeight.ViewModel)
}

class AuthorizationScreenViewController: UIViewController, AuthorizationScreenDisplayLogic {
        
    let configurator: AuthorizationScreenConfiguratorProtocol =
        AuthorizationScreenConfigurator()
    var interactor: AuthorizationScreenBusinessLogic?
    
    var nameTextFieldHeightAncor: NSLayoutConstraint?
    
    // MARK: - Properties
    let backgroudView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var segmentedControll: UISegmentedControl = {
        let items = ["login", "registration"]
        let segmentedControll = UISegmentedControl(items: items)
        segmentedControll.translatesAutoresizingMaskIntoConstraints = false
        segmentedControll.backgroundColor = .black
        segmentedControll.selectedSegmentIndex = 0
        segmentedControll.addTarget(self, action: #selector(segmentedControlledWasPressed), for: .valueChanged)
        return segmentedControll
    }()
    
    let emailTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "Email"
        textField.backgroundColor = .lightGray
        textField.translatesAutoresizingMaskIntoConstraints = false
        return textField
    }()
    
    let nameTextField: UITextField = {
        let textField = UITextField()
        textField.backgroundColor = .lightGray
        textField.placeholder = "Name"
        textField.translatesAutoresizingMaskIntoConstraints = false
        return textField
    }()
    
    let passwordTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "Password"
        textField.backgroundColor = .lightGray
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.textContentType = .newPassword
        return textField
    }()
    
    lazy var loginButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = .black
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(loginButtonWasPressed), for: .touchUpInside)
        button.setTitle(self.segmentedControll.titleForSegment(at: self.segmentedControll.selectedSegmentIndex), for: .normal)
        return button
    }()
    
    // MARK: - Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        configurator.setup(viewController: self)
        layoutFirstLayer()
        layoutSecondLayer()
        interactor?.checkIfUserAvailable(requset: AuthorizationScreen.CheckIfUserAvailable.Request())
    }

    
    func displayNameTextFieldNewsHeight(viewModel: AuthorizationScreen.ChangeTextFieldHeight.ViewModel) {
        nameTextFieldHeightAncor?.isActive = false
        nameTextFieldHeightAncor = nameTextField.heightAnchor.constraint(
            equalToConstant: viewModel.heightConstant)
        nameTextFieldHeightAncor?.isActive = true
    }
    
    private func login() {
        let userEmail = emailTextField.text
        let userPassword = passwordTextField.text
        interactor?.login(request: AuthorizationScreen.Login.Request(userEmail: userEmail,
                                                                     userPassword: userPassword))
    }
    
    @objc private func segmentedControlledWasPressed() {
        guard let title = segmentedControll.titleForSegment(at: segmentedControll.selectedSegmentIndex)
            else { return }
        let request = AuthorizationScreen.ChangeTextFieldHeight.Request(segmentedTitle: title)
        interactor?.changeTextFieldHeight(request: request)
        loginButton.setTitle(title, for: .normal)
    }
    
    @objc private func loginButtonWasPressed() {
        let title = loginButton.titleLabel?.text!
        switch title {
        case "login":
            login()
        case "registration":
            saveUser()
        default:
            return
        }
    }
    
    private func saveUser() {
        let userEmail = emailTextField.text
        let userName = nameTextField.text
        let userPassword = passwordTextField.text
        let request = AuthorizationScreen.SaveUser.Request(userEmail: userEmail,
                                                           userName: userName,
                                                           userPassword: userPassword)
        interactor?.saveUser(request: request)
    }
    
    func displayUser() {
        DispatchQueue.main.async {
            let chatScreenVC = ChatScreenViewController()
            self.navigationController?.pushViewController(chatScreenVC, animated: true)
        }
    }
    
}

//MARK: - Layout elements
extension AuthorizationScreenViewController {
    
    func layoutSecondLayer() {
        
        // segmentedControl setup
        backgroudView.addSubview(segmentedControll)
        segmentedControll.topAnchor.constraint(equalTo: backgroudView.topAnchor).isActive = true
        //segmentedControll.widthAnchor.constraint(equalToConstant: 40).isActive = true
        segmentedControll.centerXAnchor.constraint(equalTo: backgroudView.centerXAnchor).isActive = true
    
        // emailTextField setup
        backgroudView.addSubview(emailTextField)
        emailTextField.topAnchor.constraint(equalTo: segmentedControll.bottomAnchor, constant: 5).isActive = true
        emailTextField.leadingAnchor.constraint(equalTo: backgroudView.leadingAnchor).isActive = true
        emailTextField.trailingAnchor.constraint(equalTo: backgroudView.trailingAnchor).isActive = true
        emailTextField.heightAnchor.constraint(equalToConstant: 35).isActive = true
        
        // nameTextField setup
        backgroudView.addSubview(nameTextField)
        nameTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 5).isActive = true
        nameTextField.leadingAnchor.constraint(equalTo: backgroudView.leadingAnchor).isActive = true
        nameTextField.trailingAnchor.constraint(equalTo: backgroudView.trailingAnchor).isActive = true
        nameTextFieldHeightAncor = nameTextField.heightAnchor.constraint(equalToConstant: 35)
        nameTextFieldHeightAncor?.isActive = true
        
        // passwordTextField setup
        backgroudView.addSubview(passwordTextField)
        passwordTextField.topAnchor.constraint(equalTo: nameTextField.bottomAnchor, constant: 5).isActive = true
        passwordTextField.leadingAnchor.constraint(equalTo: backgroudView.leadingAnchor).isActive = true
        passwordTextField.trailingAnchor.constraint(equalTo: backgroudView.trailingAnchor).isActive = true
        passwordTextField.heightAnchor.constraint(equalToConstant: 35).isActive = true
        
    }
    
    func layoutFirstLayer() {
        view.addSubview(backgroudView)
        backgroudView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        backgroudView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        backgroudView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10).isActive = true
        backgroudView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -10).isActive = true
        backgroudView.heightAnchor.constraint(equalToConstant: 200).isActive = true
        
        // loginButton setup
        view.addSubview(loginButton)
        loginButton.topAnchor.constraint(equalTo: backgroudView.bottomAnchor, constant: 10).isActive = true
        loginButton.heightAnchor.constraint(equalToConstant: 30).isActive = true
        loginButton.centerXAnchor.constraint(equalTo: backgroudView.centerXAnchor).isActive = true
    }
    
    
}
