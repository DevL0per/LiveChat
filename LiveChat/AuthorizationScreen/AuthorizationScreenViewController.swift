//
//  AuthorizationScreenViewController.swift
//  LiveChat
//
//  Created by Роман Важник on 18/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

fileprivate struct Constants {
    static let textFieldsHeight: CGFloat = 45
    static let backgroudViewHeight: CGFloat = 500
    static let chatIconImageViewHeight: CGFloat = 150
    static let chatIconImageViewWidth: CGFloat = 150
    static let loginFormBackgroudViewHeightz: CGFloat = 200
}

protocol AuthorizationScreenDisplayLogic: class {
    func displayUser(viewModel: AuthorizationScreen.Login.ViewModel)
    func displayNewUser(viewModel: AuthorizationScreen.SaveUser.ViewModel)
    func displayNameTextFieldNewsHeight(viewModel: AuthorizationScreen.ChangeTextFieldHeight.ViewModel)
}

class AuthorizationScreenViewController: UIViewController, AuthorizationScreenDisplayLogic {
        
    let configurator: AuthorizationScreenConfiguratorProtocol =
        AuthorizationScreenConfigurator()
    var interactor: AuthorizationScreenBusinessLogic?
    
    var nameTextFieldHeightAncor: NSLayoutConstraint?
    
    // MARK: - Properties
    let loginFormBackgroudView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let backgroudView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let chatIconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(named: "chatIcon")
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    lazy var segmentedControll: UISegmentedControl = {
        let items = ["login", "registration"]
        let segmentedControll = UISegmentedControl(items: items)
        segmentedControll.translatesAutoresizingMaskIntoConstraints = false
        segmentedControll.tintColor = .white
        segmentedControll.backgroundColor = #colorLiteral(red: 0.9333333333, green: 0.3882352941, blue: 0.631372549, alpha: 1)
        segmentedControll.clipsToBounds = true
        segmentedControll.selectedSegmentIndex = 1
        segmentedControll.addTarget(self, action: #selector(segmentedControlledWasPressed), for: .valueChanged)
        return segmentedControll
    }()
    
    let emailTextField = AuthorizationScreenTextField()
    let nameTextField = AuthorizationScreenTextField()
    let passwordTextField = AuthorizationScreenTextField()
    
    lazy var loginButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = #colorLiteral(red: 0.9317067266, green: 0.3866539598, blue: 0.6329562068, alpha: 1)
        button.layer.cornerRadius = 20
        button.setTitleColor(.white, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(loginButtonWasPressed), for: .touchUpInside)
        button.setTitle("REGISTRATION", for: .normal)
        return button
    }()
    // MARK: - Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.2598086596, green: 0.2304657698, blue: 0.3598444462, alpha: 1)
        navigationController?.setNavigationBarHidden(true, animated: false)
        configurator.setup(viewController: self)
        setupTextFields()
        layoutFirstLayer()
        layoutSecondLayer()
        layoutThirdLayer()
        interactor?.checkIfUserAvailable(requset: AuthorizationScreen.CheckIfUserAvailable.Request())
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        navigationController?.setNavigationBarHidden(true, animated: false)
        addKeyboardObserver()
        
        tabBarController?.tabBar.isHidden = true
        emailTextField.text = ""
        nameTextField.text = ""
        passwordTextField.text = ""
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
    }
    
    override func dismiss(animated flag: Bool, completion: (() -> Void)? = nil) {
        super.dismiss(animated: flag, completion: nil)
    }
    
    func displayNameTextFieldNewsHeight(viewModel: AuthorizationScreen.ChangeTextFieldHeight.ViewModel) {
        nameTextFieldHeightAncor?.isActive = false
        nameTextFieldHeightAncor = nameTextField.heightAnchor.constraint(
            equalToConstant: viewModel.heightConstant)
        nameTextFieldHeightAncor?.isActive = true
    }
    
    func displayUser(viewModel: AuthorizationScreen.Login.ViewModel) {
        if let error = viewModel.error {
            let alert = AlertControllerManager.shared.createAlertController(title: "ERROR", subtitle: error)
            present(alert, animated: true, completion: nil)
        } else {
            DispatchQueue.main.async {
                let chatScreenVC = ChatsScreenViewController()
                self.navigationController?.pushViewController(chatScreenVC, animated: true)
            }
        }
    }
    
    func displayNewUser(viewModel: AuthorizationScreen.SaveUser.ViewModel) {
        if let errorMessage = viewModel.errorMessage {
            let alert = AlertControllerManager.shared.createAlertController(title: "ERROR",
                                                                subtitle: errorMessage)
            present(alert, animated: true, completion: nil)
        } else {
            displayUser(viewModel: AuthorizationScreen.Login.ViewModel(error: nil))
        }
    }
    
    @objc private func segmentedControlledWasPressed() {
        guard let title = segmentedControll.titleForSegment(at: segmentedControll.selectedSegmentIndex)
            else { return }
        
        let request = AuthorizationScreen.ChangeTextFieldHeight.Request(segmentedTitle: title)
        interactor?.changeTextFieldHeight(request: request)
        loginButton.setTitle(title.uppercased(), for: .normal)
    }
    
    @objc private func loginButtonWasPressed() {
        let title = loginButton.titleLabel?.text!
        switch title {
        case "LOGIN":
            login()
        case "REGISTRATION":
            saveUser()
        default:
            return
        }
    }
    
    private func setupTextFields() {
        emailTextField.delegate = self
        emailTextField.returnKeyType = .next
        
        nameTextField.delegate = self
        nameTextField.returnKeyType = .next
        
        passwordTextField.delegate = self
        passwordTextField.returnKeyType = .done
    }
    
    private func addKeyboardObserver() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow),
                                               name: UIResponder.keyboardWillShowNotification,
                                               object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide),
        name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc private func keyboardWillShow(_ notification: Notification) {
        
        if let frame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue {
            if view.frame.origin.y == 0 {
                view.frame.origin.y -= frame.cgRectValue.height
            }
        }
    }
    
    private func login() {
        let userEmail = emailTextField.text
        let userPassword = passwordTextField.text
        interactor?.login(request: AuthorizationScreen.Login.Request(userEmail: userEmail,
                                                                     userPassword: userPassword))
    }
    
    @objc private func keyboardWillHide(_ notification: Notification) {
        view.frame.origin.y = 0
    }
    
    private func saveUser() {
        let userEmail = emailTextField.text
        let userName = nameTextField.text
        let userPassword = passwordTextField.text
        let request = AuthorizationScreen.SaveUser.Request(userEmail: userEmail,
                                                           userName: userName,
                                                           userPassword: userPassword)
        interactor?.saveUser(request: request)
    }
    
}

//MARK: - Layout elements
extension AuthorizationScreenViewController {
    
    func layoutThirdLayer() {
        
        // segmentedControl setup
        loginFormBackgroudView.addSubview(segmentedControll)
        segmentedControll.topAnchor.constraint(equalTo: loginFormBackgroudView.topAnchor).isActive = true
        segmentedControll.centerXAnchor.constraint(equalTo: loginFormBackgroudView.centerXAnchor).isActive = true
    
        // emailTextField setup
        loginFormBackgroudView.addSubview(emailTextField)
        emailTextField.setPlaceHolderWithWhiteColor(text: "Email")
        emailTextField.textContentType = .emailAddress
        emailTextField.keyboardType = .emailAddress
        emailTextField.topAnchor.constraint(equalTo: segmentedControll.bottomAnchor, constant: 15).isActive = true
        emailTextField.leadingAnchor.constraint(equalTo: loginFormBackgroudView.leadingAnchor).isActive = true
        emailTextField.trailingAnchor.constraint(equalTo: loginFormBackgroudView.trailingAnchor).isActive = true
        emailTextField.heightAnchor.constraint(equalToConstant: Constants.textFieldsHeight).isActive = true
        
        // nameTextField setup
        loginFormBackgroudView.addSubview(nameTextField)
        nameTextField.setPlaceHolderWithWhiteColor(text: "Name")
        nameTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 5).isActive = true
        nameTextField.leadingAnchor.constraint(equalTo: loginFormBackgroudView.leadingAnchor).isActive = true
        nameTextField.trailingAnchor.constraint(equalTo: loginFormBackgroudView.trailingAnchor).isActive = true
        nameTextFieldHeightAncor = nameTextField.heightAnchor.constraint(equalToConstant: Constants.textFieldsHeight)
        nameTextFieldHeightAncor?.isActive = true
        
        // passwordTextField setup
        loginFormBackgroudView.addSubview(passwordTextField)
        passwordTextField.setPlaceHolderWithWhiteColor(text: "Password")
        passwordTextField.isSecureTextEntry = true
        passwordTextField.topAnchor.constraint(equalTo: nameTextField.bottomAnchor, constant: 5).isActive = true
        passwordTextField.leadingAnchor.constraint(equalTo: loginFormBackgroudView.leadingAnchor).isActive = true
        passwordTextField.trailingAnchor.constraint(equalTo: loginFormBackgroudView.trailingAnchor).isActive = true
        passwordTextField.heightAnchor.constraint(equalToConstant: Constants.textFieldsHeight).isActive = true
    }
    
    
    func layoutSecondLayer() {
        
        // chatIconImageView setup
        backgroudView.addSubview(chatIconImageView)
        chatIconImageView.topAnchor.constraint(equalTo: backgroudView.topAnchor, constant: 10).isActive = true
        chatIconImageView.heightAnchor.constraint(equalToConstant: Constants.chatIconImageViewHeight).isActive = true
        chatIconImageView.widthAnchor.constraint(equalToConstant: Constants.chatIconImageViewWidth).isActive = true
        chatIconImageView.centerXAnchor.constraint(equalTo: backgroudView.centerXAnchor).isActive = true
        
        // loginFormBackgroudView setup
        backgroudView.addSubview(loginFormBackgroudView)
        loginFormBackgroudView.centerXAnchor.constraint(equalTo: backgroudView.centerXAnchor).isActive = true
        loginFormBackgroudView.topAnchor.constraint(equalTo: chatIconImageView.bottomAnchor, constant: 25).isActive = true
        loginFormBackgroudView.leadingAnchor.constraint(equalTo: backgroudView.leadingAnchor, constant: 10).isActive = true
        loginFormBackgroudView.trailingAnchor.constraint(equalTo: backgroudView.trailingAnchor, constant: -10).isActive = true
        loginFormBackgroudView.heightAnchor.constraint(equalToConstant: Constants.loginFormBackgroudViewHeightz).isActive = true
        
        // loginButton setup
        backgroudView.addSubview(loginButton)
        loginButton.topAnchor.constraint(equalTo: loginFormBackgroudView.bottomAnchor, constant: 10).isActive = true
        loginButton.heightAnchor.constraint(equalToConstant: 50).isActive = true
        loginButton.widthAnchor.constraint(equalToConstant: UIScreen.main.bounds.width/1.2).isActive = true
        loginButton.centerXAnchor.constraint(equalTo: loginFormBackgroudView.centerXAnchor).isActive = true
    
    }
    
    func layoutFirstLayer() {
        view.addSubview(backgroudView)
        backgroudView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        backgroudView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        backgroudView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        backgroudView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        backgroudView.heightAnchor.constraint(equalToConstant: Constants.backgroudViewHeight).isActive = true
    }
    
}

//MARK: - UITextFieldDelegate
extension AuthorizationScreenViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == emailTextField {
            if loginButton.titleLabel?.text == "LOGIN" {
                passwordTextField.becomeFirstResponder()
            } else {
                nameTextField.becomeFirstResponder()
            }
        } else if textField == nameTextField {
            passwordTextField.becomeFirstResponder()
        } else {
            textField.resignFirstResponder()
            loginButtonWasPressed()
        }
        return true
    }
}
