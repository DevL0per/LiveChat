//
//  ChatScreenInteractor.swift
//  LiveChat
//
//  Created by Роман Важник on 20/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol ChatScreenBusinessLogic {
    func sendMessage(request: ChatScreen.SendMessage.Request)
    func fetchMessage(request: ChatScreen.FetchMessage.Request)
    func sendImage(request: ChatScreen.SendImage.Request)
}

protocol ChatScreenDataStore {
}

class ChatScreenInteractor: ChatScreenBusinessLogic, ChatScreenDataStore {
    
    var presenter: ChatScreenPresentationLogic?
    var worker = ChatScreenWorker()
    
    // MARK: Do something
    
    func sendMessage(request: ChatScreen.SendMessage.Request) {
        
        guard let userId = Auth.auth().currentUser?.uid else { return }
        let date = Int(NSDate().timeIntervalSince1970)
        let dictionary = ["fromId": userId, "toId": request.toId,
                          "text": request.text, "date": date] as [String : Any]
        worker.sendMessage(fromUserId: userId, toUserId: request.toId, dictionary: dictionary)
        let response = ChatScreen.SendMessage.Response()
        self.presenter?.presentMessage(response: response)
    }
    
    func fetchMessage(request: ChatScreen.FetchMessage.Request) {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        let userMessageRef = Database.database().reference(withPath: "userMassages").child(userId).child(request.fromUserId)
        userMessageRef.observe(.childAdded) { [weak self] (snapshot) in
            let messageRef = Database.database().reference(withPath: "messages").child(snapshot.key)
            messageRef.observeSingleEvent(of: .value) { (snapshot) in
                let message = Message(snapshot: snapshot)
                let response = ChatScreen.FetchMessage.Response(fromUserId: request.fromUserId,
                                                                message: message)
                self?.presenter?.presentMessage(response: response)
            }
        }
    }
    
    func sendImage(request: ChatScreen.SendImage.Request) {
        guard let userId = Auth.auth().currentUser?.uid,
              let jpegData = request.image.jpegData(compressionQuality: 0.2) else { return }
        let imageId = NSUUID().uuidString
        let ref = Storage.storage().reference().child("messagesImages").child(imageId)
        ref.putData(jpegData, metadata: nil) { [weak self] (metadata, error) in
            if let error = error {
                print(error)
                return
            }
            ref.downloadURL { (url, error) in
                guard let url = url else { return }
                let date = Int(NSDate().timeIntervalSince1970)
                let imageSizes = request.image.size
                let dictionary = ["fromId": userId, "toId": request.toId,
                                  "imageURL": url.absoluteString, "imageHeight": imageSizes.height,
                                  "imageWidth": imageSizes.width, "date": date] as [String : Any]
                self?.worker.sendMessage(fromUserId: userId, toUserId: request.toId, dictionary: dictionary)
            }
        }
    }
}
