//
//  ChatScreenViewController.swift
//  LiveChat
//
//  Created by Роман Важник on 20/02/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatScreenDisplayLogic: class {
    func messageWasSended(viewModel: ChatScreen.SendMessage.ViewModel)
    func displayMessage(viewModel: ChatScreen.FetchMessage.ViewModel)
}

fileprivate struct Constants {
    static let inputAreaViewHeight: CGFloat = 45
}

class ChatScreenViewController: UIViewController, ChatScreenDisplayLogic {
    
    // MARK: - Properties
    lazy var collectionView: UICollectionView = {
        let flowLayout = UICollectionViewFlowLayout()
        let collection = UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
        collection.contentInset = UIEdgeInsets(top: 10, left: 0, bottom: 10, right: 0)
        collection.delegate = self
        collection.backgroundColor = .white
        collection.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tableViewWasPressed)))
        collection.dataSource = self
        collection.backgroundColor = .black
        collection.alwaysBounceVertical = true
        collection.translatesAutoresizingMaskIntoConstraints = false
        collection.register(ChatScreenWithUserCollectionViewCell.self, forCellWithReuseIdentifier: "messageCell")
        return collection
    }()
    
    private let chatScreenNavigationBarView = UserProfileNavigationBarView()
    
    private lazy var startImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.isUserInteractionEnabled = true
        imageView.clipsToBounds = true
        imageView.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(performMessageImageZoomOut)))
        return imageView
    }()
    
    lazy var backgroundViewForZoomingImage: UIView = {
        let view = UIView()
        view.alpha = 0
        view.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width,
                            height: UIScreen.main.bounds.height)
        view.backgroundColor = .black
        return view
    }()
    
    var startImageFrame: CGRect!
    
    private lazy var inputAreaView: UIView = {
        let inputAreaView = UIView()
        inputAreaView.frame = CGRect(x: 0, y: 0, width: view.bounds.width, height: Constants.inputAreaViewHeight)
        //sendMessage layout
        inputAreaView.addSubview(sendMessageButton)
        sendMessageButton.trailingAnchor.constraint(equalTo: inputAreaView.trailingAnchor).isActive = true
        sendMessageButton.bottomAnchor.constraint(equalTo: inputAreaView.bottomAnchor).isActive = true
        sendMessageButton.widthAnchor.constraint(equalToConstant: 60).isActive = true
        sendMessageButton.heightAnchor.constraint(equalToConstant: 45).isActive = true
        //imagePickerButton layout
        inputAreaView.addSubview(imagePickerButton)
        imagePickerButton.leadingAnchor.constraint(equalTo: inputAreaView.leadingAnchor).isActive = true
        imagePickerButton.topAnchor.constraint(equalTo: inputAreaView.topAnchor).isActive = true
        imagePickerButton.heightAnchor.constraint(equalToConstant: 45).isActive = true
        imagePickerButton.widthAnchor.constraint(equalToConstant: 45).isActive = true
        //messageTextField layout
        inputAreaView.addSubview(messageTextField)
        messageTextField.leadingAnchor.constraint(equalTo: imagePickerButton.trailingAnchor).isActive = true
        messageTextField.trailingAnchor.constraint(equalTo: sendMessageButton.leadingAnchor).isActive = true
        messageTextField.bottomAnchor.constraint(equalTo: inputAreaView.bottomAnchor).isActive = true
        messageTextField.heightAnchor.constraint(equalToConstant: 45).isActive = true
        return inputAreaView
    }()
    
    lazy var imagePickerButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = #colorLiteral(red: 0.1283167436, green: 0.1333433092, blue: 0.1333121657, alpha: 1)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setImage(UIImage(named: "imagePicker"), for: .normal)
        button.addTarget(self, action: #selector(imagePickerButtonWasPressed), for: .touchUpInside)
        return button
    }()
    private var keyboardHeight: CGFloat!
    var interactor: ChatScreenBusinessLogic?
    var router: (NSObjectProtocol & ChatScreenRoutingLogic & ChatScreenDataPassing)?
    
    var user: ListOfUsers.FetchUsers.ViewModel.UserViewModel!
    var messagesViewModel: [ChatScreen.FetchMessage.ViewModel.MessageViewModel] = []
    
    private lazy var messageTextField: UITextField = {
        let textField = UITextField()
        textField.backgroundColor = #colorLiteral(red: 0.1333177388, green: 0.1333433092, blue: 0.1333121657, alpha: 1)
        textField.textColor = .white
        textField.returnKeyType = .send
        textField.delegate = self
        textField.keyboardAppearance = .dark
        textField.attributedPlaceholder = NSAttributedString(string: "print your text here...",
                                                             attributes: [NSAttributedString.Key.foregroundColor: UIColor.white])
        textField.translatesAutoresizingMaskIntoConstraints = false
        return textField
    }()
    
    private lazy var sendMessageButton: UIButton = {
        let button = UIButton()
        button.backgroundColor = #colorLiteral(red: 0.9333333333, green: 0.3882352941, blue: 0.631372549, alpha: 1)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.setTitle("send", for: .normal)
        button.addTarget(self, action: #selector(sendButtonWasPressed), for: .touchUpInside)
        return button
    }()
    
    //MARK: - Methods
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.titleView = chatScreenNavigationBarView
        setup()
        setupCollectionView()
        interactor?.fetchMessage(request: ChatScreen.FetchMessage.Request(fromUserId: user.userId))
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        tabBarController?.tabBar.isHidden = true
        chatScreenNavigationBarView.setupElements(title: user.userName, imageURL: user.userImageURL)
        setKeyboardNotitification()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self)
    }
    
    override var canBecomeFirstResponder: Bool {
        return true
    }
    
    override var inputAccessoryView: UIView? {
        get {
            inputAreaView
        }
    }
    
    @objc private func tableViewWasPressed() {
        messageTextField.resignFirstResponder()
    }
    
    func messageWasSended(viewModel: ChatScreen.SendMessage.ViewModel) {
        
    }
    
    func displayMessage(viewModel: ChatScreen.FetchMessage.ViewModel) {
        messagesViewModel.append(viewModel.messageViewModel)
        let indexPath = IndexPath(row: messagesViewModel.count-1, section: 0)
        collectionView.insertItems(at: [indexPath])
        collectionView.scrollToItem(at: indexPath, at: .bottom, animated: true)
    }
    
    @objc private func sendButtonWasPressed() {
        let request = ChatScreen.SendMessage.Request(text: messageTextField.text, toId: user.userId)
        interactor?.sendMessage(request: request)
        messageTextField.text = ""
    }
    
    @objc private func imagePickerButtonWasPressed() {
        if messageTextField.isEditing {
            messageTextField.resignFirstResponder()
        }
        let imagePicherController = UIImagePickerController()
        imagePicherController.allowsEditing = true
        imagePicherController.delegate = self
        present(imagePicherController, animated: true, completion: nil)
    }
    
    private func setKeyboardNotitification() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow),
                                               name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide),
        name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc private func keyboardWillShow(_ notification: Notification) {
        if let frame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue,
            frame.cgRectValue.height != Constants.inputAreaViewHeight  {
            keyboardHeight = frame.cgRectValue.height
            collectionView.contentInset.bottom += keyboardHeight-Constants.inputAreaViewHeight
            let indexPath = IndexPath(item: messagesViewModel.count-1, section: 0)
            collectionView.scrollToItem(at: indexPath, at: .bottom, animated: true)
        }
        
    }
    
    @objc private func keyboardWillHide(_ notification: Notification) {
        if collectionView.contentInset.bottom != 10 {
            collectionView.contentInset.bottom = 10
        }
        if startImageFrame != nil {
            startImageFrame.origin.y -= keyboardHeight
        }
    }
    
    private func setupCollectionView() {
        //collectionView layout
        view.addSubview(collectionView)
        collectionView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        collectionView.heightAnchor.constraint(equalToConstant: view.frame.height-45).isActive = true
    }
    
    private func setup() {
        let viewController = self
        let interactor = ChatScreenInteractor()
        let presenter = ChatScreenPresenter()
        let router = ChatScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    @objc private func performMessageImageZoomOut() {
        UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseInOut, animations: { [unowned self] in
            self.startImageView.frame = self.startImageFrame
            self.startImageView.layer.cornerRadius = 5
            self.backgroundViewForZoomingImage.alpha = 0
            self.inputAreaView.alpha = 1
        }) { (flag) in
            self.startImageView.removeFromSuperview()
            self.backgroundViewForZoomingImage.removeFromSuperview()
            self.startImageFrame = nil
        }
    }
    
    override func dismiss(animated flag: Bool, completion: (() -> Void)? = nil) {
        super.dismiss(animated: flag, completion: nil)
    }
}

//MARK: - UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
extension ChatScreenViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout,
ChatScreenWithUserCollectionViewCellDelegate {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        messagesViewModel.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "messageCell", for: indexPath) as! ChatScreenWithUserCollectionViewCell
        let messageViewModel = messagesViewModel[indexPath.row]
        cell.setupElements(with: messageViewModel)
        cell.delegate = self
        cell.setTextMessageWidth(with: messagesViewModel[indexPath.row].messageSize.width+13)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: UIScreen.main.bounds.width,
                      height: messagesViewModel[indexPath.row].messageSize.height + 10)
    }
    
    func performMessageImageZoomIn(imageView: UIImageView) {
        guard let startFrame = imageView.superview?.convert(imageView.frame, to: nil) else { return }
        if messageTextField.isEditing {
            messageTextField.resignFirstResponder()
        }
        self.startImageFrame = startFrame
        startImageView.frame = startImageFrame
        startImageView.image = imageView.image
        guard let keyWindow = (UIApplication.shared.windows.filter {$0.isKeyWindow}.first) else { return }
        keyWindow.addSubview(backgroundViewForZoomingImage)
        keyWindow.addSubview(startImageView)
        
        UIView.animate(withDuration: 0.5) { [unowned self] in
            let newHeight = imageView.frame.height / imageView.frame.width * self.view.bounds.width
            self.startImageView.frame = CGRect(x: 0, y: 0, width: self.view.bounds.width, height: newHeight)
            self.startImageView.center = keyWindow.center
            self.startImageView.layer.cornerRadius = 0
            self.inputAreaView.alpha = 0
            self.backgroundViewForZoomingImage.alpha = 1
            
        }
    }
}

extension ChatScreenViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        var optionalSelectedImage: UIImage?
        if let image = info[.editedImage] {
            optionalSelectedImage = image as? UIImage
        } else if let image = info[.originalImage] {
            optionalSelectedImage = image as? UIImage
        }
        guard let selectedImage = optionalSelectedImage else { return }
        interactor?.sendImage(request: ChatScreen.SendImage.Request(image: selectedImage, toId: user.userId))
        picker.dismiss(animated: true, completion: nil)
    }
}

extension ChatScreenViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        interactor?.sendMessage(request: ChatScreen.SendMessage.Request(text: textField.text, toId: user.userId))
        textField.text = ""
        return true
    }
}
